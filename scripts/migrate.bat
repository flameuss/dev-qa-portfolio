@echo off
setlocal enabledelayedexpansion

echo üöÄ Iniciando processo de migra√ß√£o do projeto dev-qa-portfolio...

REM Verificar se estamos no diret√≥rio correto
if not exist "package.json" (
    echo ‚ùå package.json n√£o encontrado. Execute este script na raiz do projeto.
    pause
    exit /b 1
)

echo ‚ÑπÔ∏è  Projeto detectado: dev-qa-portfolio

REM 1. Backup do node_modules e package-lock.json
echo ‚ÑπÔ∏è  Fazendo backup dos arquivos existentes...
if exist "node_modules" (
    if exist "node_modules.backup" rmdir /s /q "node_modules.backup" >nul 2>&1
    ren "node_modules" "node_modules.backup" >nul 2>&1
    echo ‚úÖ Backup do node_modules criado
)

if exist "package-lock.json" (
    copy "package-lock.json" "package-lock.json.backup" >nul 2>&1
    echo ‚úÖ Backup do package-lock.json criado
)

REM 2. Remover arquivo ESLint antigo se existir
if exist ".eslintrc.js" (
    ren ".eslintrc.js" ".eslintrc.js.backup" >nul 2>&1
    echo ‚úÖ Arquivo .eslintrc.js antigo movido para backup
)

REM 3. Limpar cache do npm
echo ‚ÑπÔ∏è  Limpando cache do npm...
call npm cache clean --force >nul 2>&1
echo ‚úÖ Cache do npm limpo

REM 4. Instalar depend√™ncias
echo ‚ÑπÔ∏è  Instalando novas depend√™ncias...
call npm install

if !errorlevel! equ 0 (
    echo ‚úÖ Depend√™ncias instaladas com sucesso
) else (
    echo ‚ùå Erro ao instalar depend√™ncias
    echo ‚ÑπÔ∏è  Restaurando backup...
    if exist "node_modules.backup" (
        if exist "node_modules" rmdir /s /q "node_modules"
        ren "node_modules.backup" "node_modules"
    )
    if exist "package-lock.json.backup" (
        ren "package-lock.json.backup" "package-lock.json"
    )
    pause
    exit /b 1
)

REM 5. Verificar problemas de linting
echo ‚ÑπÔ∏è  Verificando configura√ß√£o do ESLint...
call npm run lint >lint_output.tmp 2>&1

if !errorlevel! equ 0 (
    echo ‚úÖ ESLint configurado corretamente
    del lint_output.tmp >nul 2>&1
) else (
    echo ‚ö†Ô∏è  ESLint encontrou alguns problemas
    echo ‚ÑπÔ∏è  Tentando corrigir automaticamente...
    call npm run lint:fix >nul 2>&1
    if !errorlevel! equ 0 (
        echo ‚úÖ Problemas de linting corrigidos automaticamente
    ) else (
        echo ‚ö†Ô∏è  Alguns problemas precisam ser corrigidos manualmente
        type lint_output.tmp
    )
    del lint_output.tmp >nul 2>&1
)

REM 6. Verificar build
echo ‚ÑπÔ∏è  Testando build do projeto...
call npm run build >build_output.tmp 2>&1

if !errorlevel! equ 0 (
    echo ‚úÖ Build executado com sucesso
    del build_output.tmp >nul 2>&1
) else (
    echo ‚ùå Erro no build do projeto
    type build_output.tmp
    del build_output.tmp >nul 2>&1
    echo ‚ÑπÔ∏è  Verifique os erros acima e execute novamente ap√≥s as corre√ß√µes
)

REM 7. Executar testes se existirem
call npm run 2>&1 | findstr "test" >nul
if !errorlevel! equ 0 (
    echo ‚ÑπÔ∏è  Executando testes...
    call npm test -- --watchAll=false >test_output.tmp 2>&1
    
    if !errorlevel! equ 0 (
        echo ‚úÖ Todos os testes passaram
        del test_output.tmp >nul 2>&1
    ) else (
        echo ‚ö†Ô∏è  Alguns testes falharam
        type test_output.tmp
        del test_output.tmp >nul 2>&1
    )
)

REM 8. Verificar se Playwright precisa de setup
call npm list @playwright/test >nul 2>&1
if !errorlevel! equ 0 (
    echo ‚ÑπÔ∏è  Playwright detectado. Verificando browsers...
    call npx playwright list >nul 2>&1
    if not !errorlevel! equ 0 (
        echo ‚ö†Ô∏è  Browsers do Playwright n√£o est√£o instalados
        echo ‚ÑπÔ∏è  Execute: npx playwright install
    ) else (
        echo ‚úÖ Playwright est√° configurado corretamente
    )
)

REM 9. Limpeza final
echo ‚ÑπÔ∏è  Limpando arquivos tempor√°rios...
if exist "node_modules.backup" rmdir /s /q "node_modules.backup" >nul 2>&1
if exist "package-lock.json.backup" del "package-lock.json.backup" >nul 2>&1
if exist ".eslintrc.js.backup" del ".eslintrc.js.backup" >nul 2>&1

echo ‚úÖ Limpeza conclu√≠da

REM 10. Resumo final
echo.
echo ==========================================
echo üéâ MIGRA√á√ÉO CONCLU√çDA COM SUCESSO!
echo ==========================================
echo.
echo ‚ÑπÔ∏è  Pr√≥ximos passos recomendados:
echo 1. Revisar o arquivo de documenta√ß√£o gerado
echo 2. Testar as funcionalidades principais da aplica√ß√£o
echo 3. Verificar se h√° components que precisam de ajustes
echo 4. Considerar executar: npm run analyze (para an√°lise do bundle)
echo.
echo ‚ÑπÔ∏è  Comandos √∫teis:
echo ‚Ä¢ npm run dev          - Executar em modo desenvolvimento
echo ‚Ä¢ npm run build        - Gerar build de produ√ß√£o
echo ‚Ä¢ npm run preview      - Preview do build
echo ‚Ä¢ npm run lint         - Verificar linting
echo ‚Ä¢ npm run test         - Executar testes
echo.
echo ‚úÖ Projeto atualizado e pronto para uso!
echo.
pause
